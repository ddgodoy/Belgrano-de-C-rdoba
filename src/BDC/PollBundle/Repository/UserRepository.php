<?php

namespace BDC\PollBundle\Repository;

use Doctrine\ORM\EntityRepository;
use BDC\PollBundle\Service\PasswordEncrypt;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    //se fija si existe otro usuario con ese email y con un id distinto al pasado, se necesita validar para el alta o modificacion de un usuario
    function duplicateEmail($email, $id = null) {

        $id = intval($id);
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                        'SELECT u
               FROM BDCPollBundle:User u
              WHERE u.email = :email
              AND u.id != :id'
                )->setParameter('email', $email)->setParameter('id', $id);

        $users = $query->getResult();
        return count($users) > 0;
    }

    function duplicateDni($dni, $id) {
        $id = intval($id);

        $em = $this->getEntityManager();
        $query = $em->createQuery(
                        'SELECT u
               FROM BDCPollBundle:User u
              WHERE u.dni = :dni
              AND u.id != :id'
                )->setParameter('dni', $dni)->setParameter('id', $id);

        $users = $query->getResult();
        return count($users) > 0;
    }

    function authenticate($email, $password) {

        $em = $this->getEntityManager();
        $query = $em->createQuery(
                        'SELECT u
               FROM BDCPollBundle:User u
              WHERE u.email = :email'
              
                )->setParameter('email', $email);

        $user = $query->getResult();
        if (count($user)) {
            $user = $user[0];
            $encodedPassword = $user->getPassword();
          
            $salt = $user->getSalt();
          
            $enc = new PasswordEncrypt();
            
            if ($enc->isPasswordValid($encodedPassword, $password, $salt)) {
                return $user;
            }
            return false;
        }
        
    }

}
